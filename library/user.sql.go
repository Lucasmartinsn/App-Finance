// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package library

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password, email
) VALUES (
    $1,$2,$3
) RETURNING id, username, password, email, create_at
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :many
SELECT id, username, password, email, create_at FROM users WHERE username LIKE $1
`

func (q *Queries) GetUser(ctx context.Context, username string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, email, create_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreateAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
    username = $2,
    password = $3,
    email = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID       pgtype.UUID
	Username string
	Password string
	Email    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
	)
	return err
}

const updateUserPass = `-- name: UpdateUserPass :exec
UPDATE users SET
    password = $2
WHERE id = $1
`

type UpdateUserPassParams struct {
	ID       pgtype.UUID
	Password string
}

func (q *Queries) UpdateUserPass(ctx context.Context, arg UpdateUserPassParams) error {
	_, err := q.db.Exec(ctx, updateUserPass, arg.ID, arg.Password)
	return err
}
