// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package library

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccounts = `-- name: CreateAccounts :one
INSERT INTO accounts (
    title, type, description, value, date
) VALUES (
    $1,$2,$3,$4,$5
) RETURNING id, user_id, categories_id, title, type, description, value, date, create_at
`

type CreateAccountsParams struct {
	Title       string
	Type        string
	Description string
	Value       int32
	Date        pgtype.Date
}

func (q *Queries) CreateAccounts(ctx context.Context, arg CreateAccountsParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccounts,
		arg.Title,
		arg.Type,
		arg.Description,
		arg.Value,
		arg.Date,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoriesID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.Value,
		&i.Date,
		&i.CreateAt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, user_id, categories_id, title, type, description, value, date, create_at FROM accounts WHERE user_id = $1 AND type = $2 AND title LIKE $3 AND description LIKE $4 AND date LIKE $5
`

type GetAccountsParams struct {
	UserID      pgtype.UUID
	Type        string
	Title       string
	Description string
	Date        pgtype.Date
}

func (q *Queries) GetAccounts(ctx context.Context, arg GetAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAccounts,
		arg.UserID,
		arg.Type,
		arg.Title,
		arg.Description,
		arg.Date,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoriesID,
			&i.Title,
			&i.Type,
			&i.Description,
			&i.Value,
			&i.Date,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsById = `-- name: GetAccountsById :one
SELECT id, user_id, categories_id, title, type, description, value, date, create_at FROM accounts WHERE id = $1
`

func (q *Queries) GetAccountsById(ctx context.Context, id pgtype.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountsById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoriesID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.Value,
		&i.Date,
		&i.CreateAt,
	)
	return i, err
}

const updateAccounts = `-- name: UpdateAccounts :exec
UPDATE accounts SET 
    title = $2,
    type = $3,
    description = $4,
    value = $5,
    date = $6
WHERE id = $1
`

type UpdateAccountsParams struct {
	ID          pgtype.UUID
	Title       string
	Type        string
	Description string
	Value       int32
	Date        pgtype.Date
}

func (q *Queries) UpdateAccounts(ctx context.Context, arg UpdateAccountsParams) error {
	_, err := q.db.Exec(ctx, updateAccounts,
		arg.ID,
		arg.Title,
		arg.Type,
		arg.Description,
		arg.Value,
		arg.Date,
	)
	return err
}
